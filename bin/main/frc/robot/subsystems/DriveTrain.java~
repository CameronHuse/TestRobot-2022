// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
 import com.ctre.phoenix.motorcontrol.FeedbackDevice;
 import com.ctre.phoenix.motorcontrol.NeutralMode;
 import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX talonSRXEnhanced1;
private WPI_TalonSRX talonSRXEnhanced2;
private WPI_TalonSRX talonSRXEnhanced3;
private MotorControllerGroup leftMotorGroup;
private WPI_TalonSRX talonSRXEnhanced4;
private WPI_TalonSRX talonSRXEnhanced5;
private WPI_TalonSRX talonSRXEnhanced6;
private MotorControllerGroup rightMotorGroup;
private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
talonSRXEnhanced1 = new WPI_TalonSRX(0);
 
    /* Factory default hardware to prevent unexpected behavior */
talonSRXEnhanced1.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonSRXEnhanced1.setInverted(false);
talonSRXEnhanced1.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
talonSRXEnhanced1.configNominalOutputForward(0, 30);
talonSRXEnhanced1.configNominalOutputReverse(0, 30);
talonSRXEnhanced1.configPeakOutputForward(1, 30);
talonSRXEnhanced1.configPeakOutputReverse(-1, 30);
        











        

talonSRXEnhanced2 = new WPI_TalonSRX(1);
 
    /* Factory default hardware to prevent unexpected behavior */
talonSRXEnhanced2.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonSRXEnhanced2.setInverted(false);
talonSRXEnhanced2.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
talonSRXEnhanced2.configNominalOutputForward(0, 30);
talonSRXEnhanced2.configNominalOutputReverse(0, 30);
talonSRXEnhanced2.configPeakOutputForward(1, 30);
talonSRXEnhanced2.configPeakOutputReverse(-1, 30);
        











        

talonSRXEnhanced3 = new WPI_TalonSRX(2);
 
    /* Factory default hardware to prevent unexpected behavior */
talonSRXEnhanced3.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonSRXEnhanced3.setInverted(false);
talonSRXEnhanced3.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
talonSRXEnhanced3.configNominalOutputForward(0, 30);
talonSRXEnhanced3.configNominalOutputReverse(0, 30);
talonSRXEnhanced3.configPeakOutputForward(1, 30);
talonSRXEnhanced3.configPeakOutputReverse(-1, 30);
        











        

leftMotorGroup = new MotorControllerGroup(talonSRXEnhanced1, talonSRXEnhanced2 , talonSRXEnhanced3 );
 addChild("LeftMotorGroup",leftMotorGroup);
 

talonSRXEnhanced4 = new WPI_TalonSRX(3);
 
    /* Factory default hardware to prevent unexpected behavior */
talonSRXEnhanced4.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonSRXEnhanced4.setInverted(false);
talonSRXEnhanced4.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
talonSRXEnhanced4.configNominalOutputForward(0, 30);
talonSRXEnhanced4.configNominalOutputReverse(0, 30);
talonSRXEnhanced4.configPeakOutputForward(1, 30);
talonSRXEnhanced4.configPeakOutputReverse(-1, 30);
        











        

talonSRXEnhanced5 = new WPI_TalonSRX(4);
 
    /* Factory default hardware to prevent unexpected behavior */
talonSRXEnhanced5.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonSRXEnhanced5.setInverted(false);
talonSRXEnhanced5.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
talonSRXEnhanced5.configNominalOutputForward(0, 30);
talonSRXEnhanced5.configNominalOutputReverse(0, 30);
talonSRXEnhanced5.configPeakOutputForward(1, 30);
talonSRXEnhanced5.configPeakOutputReverse(-1, 30);
        











        

talonSRXEnhanced6 = new WPI_TalonSRX(5);
 
    /* Factory default hardware to prevent unexpected behavior */
talonSRXEnhanced6.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonSRXEnhanced6.setInverted(false);
talonSRXEnhanced6.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
talonSRXEnhanced6.configNominalOutputForward(0, 30);
talonSRXEnhanced6.configNominalOutputReverse(0, 30);
talonSRXEnhanced6.configPeakOutputForward(1, 30);
talonSRXEnhanced6.configPeakOutputReverse(-1, 30);
        











        

rightMotorGroup = new MotorControllerGroup(talonSRXEnhanced4, talonSRXEnhanced5 , talonSRXEnhanced6 );
 addChild("RightMotorGroup",rightMotorGroup);
 

differentialDrive1 = new DifferentialDrive(leftMotorGroup, rightMotorGroup);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void my_DriveArcade(double xSpeed, double zRotation){
            differentialDrive1.arcadeDrive(xSpeed, zRotation);
    }
}

